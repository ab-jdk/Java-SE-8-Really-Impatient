import java.io.*;
import java.net.*;
import java.nio.charset.*;
import java.nio.file.*;
import java.util.*;

public class FilesDemo {
   public static void main(String[] args) throws IOException {
      Path path = Paths.get("FilesDemo.java");
      byte[] bytes = Files.readAllBytes(path);
      String content = new String(bytes, StandardCharsets.UTF_8);
      System.out.println(content.substring(0, 100) + "...");
      List<String> lines = Files.readAllLines(path);
      System.out.println("Last line: " + lines.get(lines.size() - 1));
      path = Paths.get("FilesDemo1.out");
      content = content.replaceAll("e", "x");
      Files.write(path, content.getBytes(StandardCharsets.UTF_8));
      path = Paths.get("FilesDemo2.out");
      Files.write(path, lines);
      Collections.reverse(lines);
      Files.write(path, lines, StandardOpenOption.APPEND);
      URL url = new URL("http://horstmann.com");

      boolean deleted = Files.deleteIfExists(Paths.get("FilesDemo3.out"));
      System.out.println(deleted);

      Files.copy(url.openStream(), Paths.get("FilesDemo3.out"));
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      Files.copy(Paths.get("FilesDemo3.out"), out);
      System.out.println(out.toString("UTF-8").substring(0, 100) + "...");

      Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo4.out"));
      Files.move(Paths.get("FilesDemo4.out"), Paths.get("FilesDemo5.out"));
      Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo5.out"), 
         StandardCopyOption.REPLACE_EXISTING,
         StandardCopyOption.COPY_ATTRIBUTES);      
      Files.move(Paths.get("FilesDemo5.out"), Paths.get("FilesDemo6.out"), 
         StandardCopyOption.ATOMIC_MOVE);
      Files.delete(Paths.get("FilesDemo6.out"));

      Path newPath = Files.createTempFile(null, ".txt");
      System.out.println(newPath);
      newPath = Files.createTempDirectory("fred");
      System.out.println(newPath);
   }
}
}
   }
      System.out.println(newPath);
      newPath = Files.createTempDirectory("fred");
      System.out.println(newPath);
      Path newPath = Files.createTempFile(null, ".txt");

      Files.delete(Paths.get("FilesDemo6.out"));
         StandardCopyOption.ATOMIC_MOVE);
      Files.move(Paths.get("FilesDemo5.out"), Paths.get("FilesDemo6.out"), 
         StandardCopyOption.COPY_ATTRIBUTES);      
         StandardCopyOption.REPLACE_EXISTING,
      Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo5.out"), 
      Files.move(Paths.get("FilesDemo4.out"), Paths.get("FilesDemo5.out"));
      Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo4.out"));

      System.out.println(out.toString("UTF-8").substring(0, 100) + "...");
      Files.copy(Paths.get("FilesDemo3.out"), out);
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      Files.copy(url.openStream(), Paths.get("FilesDemo3.out"));

      System.out.println(deleted);
      boolean deleted = Files.deleteIfExists(Paths.get("FilesDemo3.out"));

      URL url = new URL("http://horstmann.com");
      Files.write(path, lines, StandardOpenOption.APPEND);
      Collections.reverse(lines);
      Files.write(path, lines);
      path = Paths.get("FilesDemo2.out");
      Files.write(path, content.getBytes(StandardCharsets.UTF_8));
      content = content.replaceAll("e", "x");
      path = Paths.get("FilesDemo1.out");
      System.out.println("Last line: " + lines.get(lines.size() - 1));
      List<String> lines = Files.readAllLines(path);
      System.out.println(content.substring(0, 100) + "...");
      String content = new String(bytes, StandardCharsets.UTF_8);
      byte[] bytes = Files.readAllBytes(path);
      Path path = Paths.get("FilesDemo.java");
   public static void main(String[] args) throws IOException {
public class FilesDemo {

import java.util.*;
import java.nio.file.*;
import java.nio.charset.*;
import java.net.*;
import java.io.*;
